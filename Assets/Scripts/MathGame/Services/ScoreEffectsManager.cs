using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using SoundSystem.Enums;

namespace MathGame.Services
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—á–∫–æ–≤
    /// </summary>
    public class ScoreEffectsManager : MonoBehaviour
    {
        [Header("Milestone Settings")]
        [SerializeField] private int[] _milestoneThresholds = { 10, 25, 50, 100, 200 };
        [SerializeField] private ParticleSystem _celebrationEffect;
        [SerializeField] private SoundType _achievementSound;

        [Header("Effect Settings")]
        [SerializeField] private Transform _effectSpawnPoint;

        // –°–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        public event Action<int> OnMilestoneReached; // score threshold
        public event Action<SoundType> OnPlaySound;

        private HashSet<int> _achievedMilestones = new HashSet<int>();

        private void Awake()
        {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
            if (_effectSpawnPoint == null)
            {
                _effectSpawnPoint = transform;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º–∏–ª–µ—Å—Ç–æ—É–Ω–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞
        /// </summary>
        public void CheckMilestones(int currentScore)
        {
            foreach (var threshold in _milestoneThresholds)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ø–æ—Ä–æ–≥ –∏ –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω
                if (currentScore >= threshold && !_achievedMilestones.Contains(threshold))
                {
                    TriggerMilestone(threshold);
                    _achievedMilestones.Add(threshold);
                }
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–ª–µ—Å—Ç–æ—É–Ω–∞
        /// </summary>
        private void TriggerMilestone(int threshold)
        {
            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            OnPlaySound?.Invoke(_achievementSound);

            // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–∞–ª—é—Ç–∞
            if (_celebrationEffect != null)
            {
                PlayCelebrationEffect();
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
            OnMilestoneReached?.Invoke(threshold);

            Debug.Log($"üéâ Milestone reached: {threshold} points!");
        }

        /// <summary>
        /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç —Å–∞–ª—é—Ç–∞
        /// </summary>
        private void PlayCelebrationEffect()
        {
            if (_celebrationEffect == null) return;

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            var effectInstance = Instantiate(_celebrationEffect, _effectSpawnPoint.position, Quaternion.identity);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç
            var main = effectInstance.main;

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —ç—Ñ—Ñ–µ–∫—Ç
            effectInstance.Play();

            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            StartCoroutine(DestroyEffectAfterDelay(effectInstance, effectInstance.main.duration + effectInstance.main.startLifetime.constantMax));
        }

        /// <summary>
        /// –£–Ω–∏—á—Ç–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        /// </summary>
        private IEnumerator DestroyEffectAfterDelay(ParticleSystem effect, float delay)
        {
            yield return new WaitForSeconds(delay);

            if (effect != null)
            {
                Destroy(effect.gameObject);
            }
        }
    }
}