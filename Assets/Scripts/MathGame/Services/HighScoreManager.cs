using MathGame.Enums;
using UnityEngine;

namespace MathGame.Services
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ—Ä–¥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º
    /// </summary>
    public static class HighScoreManager
    {
        private const string HIGH_SCORE_KEY_PREFIX = "HighScore_";

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á–µ—Ç –µ—Å–ª–∏ –æ–Ω –ª—É—á—à–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞
        /// </summary>
        /// <param name="difficulty">–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</param>
        /// <param name="score">–ù–∞–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç</param>
        /// <returns>True –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥</returns>
        public static bool SaveScore(DifficultyLevel difficulty, int score)
        {
            var currentBest = GetHighScore(difficulty);

            if (score > currentBest)
            {
                var key = GetHighScoreKey(difficulty);
                PlayerPrefs.SetInt(key, score);
                PlayerPrefs.Save();

                Debug.Log($"üèÜ New high score for {difficulty}: {score} (previous: {currentBest})");
                return true;
            }

            return false;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Å—á–µ—Ç –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        /// </summary>
        /// <param name="DifficultyLevel">–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã</param>
        /// <returns>–õ—É—á—à–∏–π —Å—á–µ—Ç (0 –µ—Å–ª–∏ —Ä–µ–∫–æ—Ä–¥–∞ –Ω–µ—Ç)</returns>
        public static int GetHighScore(DifficultyLevel difficulty)
        {
            var key = GetHighScoreKey(difficulty);
            return PlayerPrefs.GetInt(key, 0);
        }

        /// <summary>
        /// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ä–µ–∫–æ—Ä–¥—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        /// </summary>
        public static void ResetAllHighScores()
        {
            foreach (DifficultyLevel difficulty in System.Enum.GetValues(typeof(DifficultyLevel)))
            {
                var key = GetHighScoreKey(difficulty);
                PlayerPrefs.DeleteKey(key);
            }
            PlayerPrefs.Save();

            Debug.Log("üóëÔ∏è All high scores have been reset");
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è PlayerPrefs
        /// </summary>
        private static string GetHighScoreKey(DifficultyLevel difficulty)
        {
            return HIGH_SCORE_KEY_PREFIX + difficulty;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∫–æ—Ä–¥—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        /// </summary>
        public static void LogAllHighScores()
        {
            Debug.Log("=== HIGH SCORES ===");
            foreach (DifficultyLevel difficulty in System.Enum.GetValues(typeof(DifficultyLevel)))
            {
                var score = GetHighScore(difficulty);
                Debug.Log($"{difficulty}: {score}");
            }
            Debug.Log("==================");
        }
    }
}