using System.Collections.Generic;
using System.Linq;
using MathGame.Configs;
using MathGame.Enums;
using MathGame.Models;
using MathGame.Screens;
using MathGame.Settings;
using ScreenManager.Core;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace MathGame.UI
{
    public class ResultScreen : UIScreen<GameSessionResult>
    {
        [Header("UI References")]
        [SerializeField] private TextMeshProUGUI _phraseText;
        [SerializeField] private TextMeshProUGUI _accuracyText;
        [SerializeField] private TextMeshProUGUI _timeText;

        [Header("Score Display (for Balloon Mode)")]
        [SerializeField] private TextMeshProUGUI _currentScoreText;
        [SerializeField] private TextMeshProUGUI _highScoreText;
        [SerializeField] private TextMeshProUGUI _newRecordText;

        [Header("Configuration")]
        [SerializeField] private ResultPhrasesConfig _phrasesConfig;

        [Header("Buttons")]
        [SerializeField] private Button _restartButton;
        [SerializeField] private Button _homeButton;

        private GameSessionResult _sessionResult;

        public override void Initialize(GameSessionResult context)
        {
            _sessionResult = context;
            DisplayResults();
            SetupButtons();
        }

        private void DisplayResults()
        {
            if (_sessionResult.GameSettings.GameType == GameType.Balloons)
            {
                DisplayBalloonModeResults();
            }
            else
            {
                DisplayCardsModeResults();
            }
        }

        private void DisplayCardsModeResults()
        {
            var (phrase, color) = _phrasesConfig.GetPhraseForAccuracy(_sessionResult.AccuracyPercentage);
            _phraseText.text = phrase;
            _phraseText.color = color;

            _accuracyText.gameObject.SetActive(true);
            _accuracyText.text = $"{_sessionResult.AccuracyPercentage:F0}%";

            var totalTime = _sessionResult.TotalTime;
            _timeText.text = totalTime.TotalHours >= 1
                ? $"{(int)totalTime.TotalHours}:{totalTime.Minutes:D2}:{totalTime.Seconds:D2}"
                : $"{(int)totalTime.TotalMinutes}:{totalTime.Seconds:D2}";

            // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∂–∏–º–∞ —à–∞—Ä–∏–∫–æ–≤
            if (_currentScoreText != null) _currentScoreText.gameObject.SetActive(false);
            if (_highScoreText != null) _highScoreText.gameObject.SetActive(false);
            if (_newRecordText != null) _newRecordText.gameObject.SetActive(false);
        }

        private void DisplayBalloonModeResults()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
            var balloonResult = _sessionResult as BalloonGameSessionResult;
            var score = balloonResult?.CurrentScore ?? _sessionResult.CorrectAnswers;

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
            if (_accuracyText != null)
                _accuracyText.text = $"{score}";

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏ –ª—É—á—à–∏–π —Å—á–µ—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (balloonResult != null)
            {
                if (_currentScoreText != null)
                    _currentScoreText.text = $"–°—á–µ—Ç: {balloonResult.CurrentScore}";

                if (_highScoreText != null)
                    _highScoreText.text = $"–†–µ–∫–æ—Ä–¥: {balloonResult.HighScore}";

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ–∫–æ—Ä–¥–µ
                if (_newRecordText != null)
                {
                    if (balloonResult.IsNewHighScore)
                    {
                        _newRecordText.gameObject.SetActive(true);
                        _newRecordText.text = "üéâ –ù–û–í–´–ô –†–ï–ö–û–†–î! üéâ";
                        _newRecordText.color = Color.yellow;
                    }
                    else
                    {
                        _newRecordText.gameObject.SetActive(false);
                    }
                }
            }
            else
            {
                // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if (_currentScoreText != null) _currentScoreText.gameObject.SetActive(false);
                if (_highScoreText != null) _highScoreText.gameObject.SetActive(false);
                if (_newRecordText != null) _newRecordText.gameObject.SetActive(false);
            }

            // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞
            string phrase;
            Color color;

            if (score >= 50)
            {
                phrase = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä!";
                color = Color.green;
            }
            else if (score >= 30)
            {
                phrase = "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!";
                color = Color.green;
            }
            else if (score >= 20)
            {
                phrase = "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!";
                color = new Color(0.5f, 0.8f, 0.2f); // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            }
            else if (score >= 10)
            {
                phrase = "–ù–µ–ø–ª–æ—Ö–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!";
                color = Color.yellow;
            }
            else if (score >= 5)
            {
                phrase = "–¢—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ!";
                color = new Color(1f, 0.6f, 0f); // –û—Ä–∞–Ω–∂–µ–≤—ã–π
            }
            else
            {
                phrase = "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!";
                color = Color.red;
            }

            _phraseText.text = phrase;
            _phraseText.color = color;
        }

        private void SetupButtons()
        {
            if (_restartButton != null)
            {
                _restartButton.onClick.AddListener(OnRestartClicked);
            }

            if (_homeButton != null)
            {
                _homeButton.onClick.AddListener(OnMenuClicked);
            }
        }

        private void OnRestartClicked()
        {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–≥—Ä–æ–≤–æ–º—É —ç–∫—Ä–∞–Ω—É —Å —Ç–µ–º–∏ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if (_sessionResult?.GameSettings.GameType == GameType.Balloons)
            {
                ScreensManager.OpenScreen<BalloonGameScreen, GameSettings>(_sessionResult.GameSettings);
                CloseScreen();
            }
            else
            {
                ScreensManager.OpenScreen<CardsGameScreen, GameSettings>(_sessionResult.GameSettings);
                CloseScreen();
            }
        }

        private void OnMenuClicked()
        {
            ScreensManager.OpenScreen<MainMenuScreen>();
            CloseScreen();
        }

        private string GetDefaultPhrase(float accuracy)
        {
            return accuracy switch
            {
                >= 90 => "–û—Ç–ª–∏—á–Ω–æ!",
                >= 70 => "–•–æ—Ä–æ—à–æ!",
                >= 50 => "–ú–æ–∂–Ω–æ –ª—É—á—à–µ!",
                >= 30 => "–ù—É–∂–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞!",
                _ => "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!"
            };
        }

        private Color GetDefaultColor(float accuracy)
        {
            return accuracy switch
            {
                >= 90 => new Color(0.2f, 0.8f, 0.2f), // –ó–µ–ª–µ–Ω—ã–π
                >= 70 => new Color(0.4f, 0.7f, 0.4f), // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                >= 50 => new Color(1f, 0.8f, 0.2f), // –ñ–µ–ª—Ç—ã–π
                >= 30 => new Color(1f, 0.5f, 0.2f), // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                _ => new Color(0.8f, 0.3f, 0.3f) // –ö—Ä–∞—Å–Ω—ã–π
            };
        }

        protected override void OnDestroy()
        {
            base.OnDestroy();

            if (_restartButton != null)
                _restartButton.onClick.RemoveAllListeners();

            if (_homeButton != null)
                _homeButton.onClick.RemoveAllListeners();
        }
    }
}