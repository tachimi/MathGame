using MathGame.Enums;
using MathGame.GameModes.Balloons;
using MathGame.GameModes.Balloons.BalloonsSystem;
using MathGame.Models;
using MathGame.Settings;
using MathGame.UI;
using ScreenManager.Core;
using SoundSystem.Enums;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using MathGame.Configs;
using SoundSystem.Core;
using SoundSystem.Events;
using UniTaskPubSub;
using VContainer;
using MathGame.Services;

namespace MathGame.Screens
{
    /// <summary>
    /// –≠–∫—Ä–∞–Ω –¥–ª—è –∏–≥—Ä—ã —Å —à–∞—Ä–∏–∫–∞–º–∏ 
    /// </summary>
    public class BalloonGameScreen : UIScreen<GameSettings>
    {
        [Header("UI References")]
        [SerializeField] private Button _homeButton;
        [SerializeField] private TextMeshProUGUI _timerText;
        [SerializeField] private LivesDisplay _livesDisplay;
        [SerializeField] private TextMeshProUGUI _scoreText;
        
        [Header("Game Components")]
        [SerializeField] private TextMeshProUGUI _questionText;
        [SerializeField] private RectTransform _balloonsContainer;
        
        [Header("Balloon Game Configuration")]
        [SerializeField] private BalloonModeConfig _balloonConfig;
        [SerializeField] private BalloonEffectsManager _effectsManager;
        [SerializeField] private ScoreEffectsManager _milestoneManager;

        private BalloonGameManager _balloonGameManager;
        private IAsyncPublisher _publisher;
        private GameSettings _gameSettings;

        [Inject]
        public void Construct(IAsyncPublisher publisher)
        {
            _publisher = publisher;
        }
        
        public override void Initialize(GameSettings context)
        {
            _gameSettings = context;

            SetupUI();
            SetupBalloonGame();
        }

        private void SetupUI()
        {
            if (_homeButton != null)
                _homeButton.onClick.AddListener(OnHomeClicked);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —à–∞—Ä–∏–∫–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω
            if (_balloonsContainer == null)
            {
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
            UpdateTimerText(0);
            UpdateScoreText(0);
        }

        private void SetupBalloonGame()
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            if (_balloonConfig == null)
            {
                _balloonConfig = Resources.Load<BalloonModeConfig>("Configs/BalloonModeConfig");
                if (_balloonConfig == null)
                {
                    return;
                }
            }

            try
            {
                // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º —à–∞—Ä–∏–∫–æ–≤
                _balloonGameManager = new BalloonGameManager(_balloonConfig);
                _balloonGameManager.Initialize(_gameSettings, _balloonsContainer);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
                _balloonGameManager.OnGameStateChanged += OnBalloonGameStateChanged;
                _balloonGameManager.OnTimerUpdated += OnTimerUpdated;
                _balloonGameManager.OnLivesChanged += OnLivesChanged;
                _balloonGameManager.OnScoreChanged += OnScoreChanged;
                _balloonGameManager.OnRoundComplete += OnRoundComplete;
                _balloonGameManager.OnAnswerSelected += OnBalloonAnswerSelected;
                _balloonGameManager.OnBalloonCreated += OnBalloonCreated;

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
                //SetupMilestoneManager();
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                InitializeLivesDisplay();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
                _balloonGameManager.StartGameLoop();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
                UpdateQuestionText();
            }
            catch (System.Exception ex)
            {
            }
        }


        private void OnBalloonGameStateChanged(BalloonGameState state)
        {
            if (state == BalloonGameState.GameOver)
            {
                // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                var score = _balloonGameManager?.GetCurrentScore() ?? 0;
                var difficulty = _gameSettings?.Difficulty ?? DifficultyLevel.Easy;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —Ä–µ–∫–æ—Ä–¥
                var isNewHighScore = HighScoreManager.SaveScore(difficulty, score);
                var highScore = HighScoreManager.GetHighScore(difficulty);

                // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —à–∞—Ä–∏–∫–æ–≤
                var result = new BalloonGameSessionResult
                {
                    StartTime = _balloonGameManager?.GetGameStartTime() ?? System.DateTime.Now,
                    EndTime = System.DateTime.Now,
                    GameSettings = _gameSettings,
                    CurrentScore = score,
                    HighScore = highScore,
                    IsNewHighScore = isNewHighScore
                };

                // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ResultScreen
                // –í —Ä–µ–∂–∏–º–µ —à–∞—Ä–∏–∫–æ–≤ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç = –æ–¥–Ω–æ –æ—á–∫–æ
                for (int i = 0; i < score; i++)
                {
                    result.Results.Add(new QuestionResult
                    {
                        IsCorrect = true,
                        TimeSpent = System.TimeSpan.FromSeconds(1) // –§–∏–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
                    });
                }

                ScreensManager.OpenScreen<ResultScreen, GameSessionResult>(result);
                CloseScreen();
            }

            if (state == BalloonGameState.Interrupted)
            {
                ScreensManager.OpenScreen<MainMenuScreen>();
                CloseScreen();
            }
        }

        private void OnTimerUpdated(float timeRemaining)
        {
            UpdateTimerText(timeRemaining);
        }

        private void OnLivesChanged(int currentLives)
        {
            UpdateLivesDisplay(currentLives);
        }

        private void OnScoreChanged(int currentScore)
        {
            UpdateScoreText(currentScore);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞
            _milestoneManager?.CheckMilestones(currentScore);
        }

        private void OnRoundComplete()
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
            UpdateQuestionText();
        }

        private void OnBalloonAnswerSelected(int selectedAnswer)
        {
      
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞—Ä–∏–∫–∞
        /// </summary>
        private void OnBalloonCreated(BalloonAnswer balloon)
        {
            if (balloon == null || _effectsManager == null) return;

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            _effectsManager.SubscribeToBalloon(balloon);

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∑–≤—É–∫–∞
            balloon.OnPlaySound += PlayBalloonSound;
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        /// </summary>
      //  private void SetupMilestoneManager()
      //  {
      //      if (_milestoneManager == null) return;
//
      //      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      //      _milestoneManager.OnMilestoneReached += OnMilestoneReached;
      //      _milestoneManager.OnPlaySound += PlayMilestoneSound;
      //  }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–ª–µ—Å—Ç–æ—É–Ω–∞
        /// </summary>
        private void OnMilestoneReached(int threshold)
        {
            Debug.Log($"üéâ Milestone reached: {threshold} points!");

            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å UI —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å popup —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        }

        /// <summary>
        /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        /// </summary>
        private void PlayMilestoneSound(SoundType soundType)
        {
            _publisher.Publish(new SoundEvent(soundType));
        }

        /// <summary>
        /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —à–∞—Ä–∏–∫–∞
        /// </summary>
        private void PlayBalloonSound(SoundType soundType)
        {
            _publisher.Publish(new SoundEvent(soundType));
        }

        private void UpdateTimerText(float timeRemaining)
        {
            if (_timerText != null)
            {
                var seconds = Mathf.CeilToInt(timeRemaining);
                _timerText.text = seconds.ToString();
                
                // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
                if (seconds <= 5)
                    _timerText.color = Color.red;
                else if (seconds <= 10)
                    _timerText.color = Color.yellow;
                else
                    _timerText.color = Color.white;
            }
        }

        private void InitializeLivesDisplay()
        {
            var difficultySettings = _balloonConfig.GetDifficultySettings(_gameSettings.Difficulty);
            var livesCount = difficultySettings?.Lives ?? 3;
            _livesDisplay.Initialize(livesCount);
        }
        
        private void UpdateLivesDisplay(int currentLives)
        {
            _livesDisplay?.UpdateLives(currentLives);
        }

        private void UpdateScoreText(int score)
        {
            if (_scoreText != null)
                _scoreText.text = score.ToString();
        }

        private void UpdateQuestionText()
        {
            if (_questionText != null && _balloonGameManager?.CurrentQuestion != null)
            {
                _questionText.text = _balloonGameManager.CurrentQuestion.GetQuestionDisplay();
            }
        }

        private void OnHomeClicked()
        {
            _balloonGameManager?.StopGame();
        }

        protected override void OnDestroy()
        {
            base.OnDestroy();

            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —à–∞—Ä–∏–∫–æ–≤
            if (_balloonGameManager != null)
            {
                _balloonGameManager.OnGameStateChanged -= OnBalloonGameStateChanged;
                _balloonGameManager.OnTimerUpdated -= OnTimerUpdated;
                _balloonGameManager.OnLivesChanged -= OnLivesChanged;
                _balloonGameManager.OnScoreChanged -= OnScoreChanged;
                _balloonGameManager.OnRoundComplete -= OnRoundComplete;
                _balloonGameManager.OnAnswerSelected -= OnBalloonAnswerSelected;
                _balloonGameManager.OnBalloonCreated -= OnBalloonCreated;

                _balloonGameManager.Cleanup();
            }

            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            if (_milestoneManager != null)
            {
                _milestoneManager.OnMilestoneReached -= OnMilestoneReached;
                _milestoneManager.OnPlaySound -= PlayMilestoneSound;
            }

            // –û—á–∏—â–∞–µ–º UI –ø–æ–¥–ø–∏—Å–∫–∏
            _homeButton?.onClick.RemoveAllListeners();
        }
    }
}